# -*- coding: utf-8 -*-
"""Untitled6.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F4l7OT-XdfYppmnSxv-JMKei-3p8dB_r
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import os

def read_and_plot_mpu_data(filename='mpu_data1.csv', sample_rate=10):
    """
    Lê dados do arquivo CSV gerado pelo MPU6050 e plota gráficos de aceleração e giroscópio.

    Args:
        filename (str): Nome do arquivo CSV
        sample_rate (float): Taxa de amostragem em Hz (padrão: 10 Hz baseado no sleep_ms(100))
    """

    # Verifica se o arquivo existe
    if not os.path.exists(filename):
        print(f"Erro: Arquivo '{filename}' não encontrado!")
        return

    try:
        # Lê o arquivo CSV
        df = pd.read_csv(filename)

        # Verifica se as colunas esperadas existem
        expected_columns = ['Sample', 'Acc.X', 'Acc.Y', 'Acc.Z', 'Gyro.X', 'Gyro.Y', 'Gyro.Z', 'Temp']
        if not all(col in df.columns for col in expected_columns):
            print(f"Erro: Colunas esperadas não encontradas no arquivo.")
            print(f"Colunas encontradas: {list(df.columns)}")
            return

        # Calcula o tempo baseado na taxa de amostragem
        time_seconds = df['Sample'] / sample_rate

        # Configuração dos gráficos
        plt.style.use('default')
        fig, axes = plt.subplots(2, 2, figsize=(15, 10))
        fig.suptitle('Dados do Sensor MPU6050', fontsize=16, fontweight='bold')

        # Gráfico de Aceleração
        axes[0, 0].plot(time_seconds, df['Acc.X'], 'r-', label='Acc X', linewidth=1.5)
        axes[0, 0].plot(time_seconds, df['Acc.Y'], 'g-', label='Acc Y', linewidth=1.5)
        axes[0, 0].plot(time_seconds, df['Acc.Z'], 'b-', label='Acc Z', linewidth=1.5)
        axes[0, 0].set_title('Aceleração (Raw Values)', fontweight='bold')
        axes[0, 0].set_xlabel('Tempo (s)')
        axes[0, 0].set_ylabel('Aceleração (LSB)')
        axes[0, 0].legend()
        axes[0, 0].grid(True, alpha=0.3)

        # Gráfico de Giroscópio
        axes[0, 1].plot(time_seconds, df['Gyro.X'], 'r-', label='Gyro X', linewidth=1.5)
        axes[0, 1].plot(time_seconds, df['Gyro.Y'], 'g-', label='Gyro Y', linewidth=1.5)
        axes[0, 1].plot(time_seconds, df['Gyro.Z'], 'b-', label='Gyro Z', linewidth=1.5)
        axes[0, 1].set_title('Giroscópio (Raw Values)', fontweight='bold')
        axes[0, 1].set_xlabel('Tempo (s)')
        axes[0, 1].set_ylabel('Velocidade Angular (LSB)')
        axes[0, 1].legend()
        axes[0, 1].grid(True, alpha=0.3)

        # Gráfico de Temperatura
        axes[1, 0].plot(time_seconds, df['Temp'], 'orange', linewidth=2)
        axes[1, 0].set_title('Temperatura', fontweight='bold')
        axes[1, 0].set_xlabel('Tempo (s)')
        axes[1, 0].set_ylabel('Temperatura (°C)')
        axes[1, 0].grid(True, alpha=0.3)

        # Gráfico de Magnitude da Aceleração
        acc_magnitude = np.sqrt(df['Acc.X']**2 + df['Acc.Y']**2 + df['Acc.Z']**2)
        axes[1, 1].plot(time_seconds, acc_magnitude, 'purple', linewidth=2)
        axes[1, 1].set_title('Magnitude da Aceleração', fontweight='bold')
        axes[1, 1].set_xlabel('Tempo (s)')
        axes[1, 1].set_ylabel('Magnitude (LSB)')
        axes[1, 1].grid(True, alpha=0.3)

        plt.tight_layout()
        plt.show()

        # Exibe estatísticas básicas
        print(f"\n=== Estatísticas dos Dados ===")
        print(f"Número total de amostras: {len(df)}")
        print(f"Duração total: {time_seconds.iloc[-1]:.2f} segundos")
        print(f"Taxa de amostragem: {sample_rate} Hz")

        print(f"\n=== Aceleração (LSB) ===")
        print(f"Acc X - Média: {df['Acc.X'].mean():.2f}, Desvio: {df['Acc.X'].std():.2f}")
        print(f"Acc Y - Média: {df['Acc.Y'].mean():.2f}, Desvio: {df['Acc.Y'].std():.2f}")
        print(f"Acc Z - Média: {df['Acc.Z'].mean():.2f}, Desvio: {df['Acc.Z'].std():.2f}")

        print(f"\n=== Giroscópio (LSB) ===")
        print(f"Gyro X - Média: {df['Gyro.X'].mean():.2f}, Desvio: {df['Gyro.X'].std():.2f}")
        print(f"Gyro Y - Média: {df['Gyro.Y'].mean():.2f}, Desvio: {df['Gyro.Y'].std():.2f}")
        print(f"Gyro Z - Média: {df['Gyro.Z'].mean():.2f}, Desvio: {df['Gyro.Z'].std():.2f}")

        print(f"\n=== Temperatura ===")
        print(f"Média: {df['Temp'].mean():.2f}°C, Min: {df['Temp'].min():.2f}°C, Max: {df['Temp'].max():.2f}°C")

    except Exception as e:
        print(f"Erro ao processar o arquivo: {e}")

def convert_raw_to_physical(filename='mpu_data1.csv', acc_scale=16384, gyro_scale=131):
    """
    Converte valores raw para unidades físicas e plota.

    Args:
        filename (str): Nome do arquivo CSV
        acc_scale (int): Escala do acelerômetro (16384 para ±2g)
        gyro_scale (int): Escala do giroscópio (131 para ±250°/s)
    """

    if not os.path.exists(filename):
        print(f"Erro: Arquivo '{filename}' não encontrado!")
        return

    try:
        df = pd.read_csv(filename)

        # Converte para unidades físicas
        df['Acc_X_g'] = df['Acc.X'] / acc_scale
        df['Acc_Y_g'] = df['Acc.Y'] / acc_scale
        df['Acc_Z_g'] = df['Acc.Z'] / acc_scale

        df['Gyro_X_dps'] = df['Gyro.X'] / gyro_scale
        df['Gyro_Y_dps'] = df['Gyro.Y'] / gyro_scale
        df['Gyro_Z_dps'] = df['Gyro.Z'] / gyro_scale

        # Calcula tempo
        time_seconds = df['Sample'] / 10  # 10 Hz baseado no sleep_ms(100)

        # Plota dados convertidos
        fig, axes = plt.subplots(2, 1, figsize=(12, 8))
        fig.suptitle('Dados MPU6050 - Unidades Físicas', fontsize=16, fontweight='bold')

        # Aceleração em g
        axes[0].plot(time_seconds, df['Acc_X_g'], 'r-', label='Acc X', linewidth=1.5)
        axes[0].plot(time_seconds, df['Acc_Y_g'], 'g-', label='Acc Y', linewidth=1.5)
        axes[0].plot(time_seconds, df['Acc_Z_g'], 'b-', label='Acc Z', linewidth=1.5)
        axes[0].set_title('Aceleração')
        axes[0].set_xlabel('Tempo (s)')
        axes[0].set_ylabel('Aceleração (g)')
        axes[0].legend()
        axes[0].grid(True, alpha=0.3)

        # Giroscópio em °/s
        axes[1].plot(time_seconds, df['Gyro_X_dps'], 'r-', label='Gyro X', linewidth=1.5)
        axes[1].plot(time_seconds, df['Gyro_Y_dps'], 'g-', label='Gyro Y', linewidth=1.5)
        axes[1].plot(time_seconds, df['Gyro_Z_dps'], 'b-', label='Gyro Z', linewidth=1.5)
        axes[1].set_title('Giroscópio')
        axes[1].set_xlabel('Tempo (s)')
        axes[1].set_ylabel('Velocidade Angular (°/s)')
        axes[1].legend()
        axes[1].grid(True, alpha=0.3)

        plt.tight_layout()
        plt.show()

    except Exception as e:
        print(f"Erro ao processar o arquivo: {e}")

# Exemplo de uso
if __name__ == "__main__":
    # Lê e plota os dados raw
    print("Plotando dados raw do MPU6050...")
    read_and_plot_mpu_data('mpu_data1.csv')

    # Lê e plota os dados convertidos para unidades físicas
    print("\nPlotando dados convertidos para unidades físicas...")
    convert_raw_to_physical('mpu_data1.csv')